we can perform a normal linear search gives TC of O(log N)

if the array was not rotated we could have performed normal binary search.

But the array is rotated so its imp to have a note of the target and the mid element reciding in rotates part of the array or the normal part

so we can think of the cases narrow down to 4 cases

                                mid  |   target                search
                            original |   rotated               ------->
                           rotated   |   original             <-------
                           rotated   |   rotated              std binary search
                            original |   original             std binary search
                            
  TC-O(log N)                         
                            
  class Solution {
    public int search(int[] nums, int target) {
        return bs(nums,target);
    }
    int bs(int[] nums,int target){
        int st=0, end= nums.length-1,ans=-1;
        while(st<=end){
            int mid=(st+end)/2;
            if(target>=nums[0] && nums[mid]<nums[0]){
                end=mid-1;
            }else if(target<nums[0] && nums[mid]>=nums[0]){
                st=mid+1;
            }else{
                if(nums[mid]>target){
                    end=mid-1;
                }else if(nums[mid]<target){
                    st=mid+1;
                }else{
                    ans=mid;
                    break;
                }
            }
        }
        return ans;
    }
}            
